#!/bin/bash
#version 1.0
function dyno(){
    
    declare -a commands
    commands=(
        "open::Opens current folder"
        "script::Open the 'dyno' Script file"
        "source::Source the Current file in Shell"
        "commands::List All commands created by DYNO"
        "location::Navigate to the source location of Dyno"
        "add::Add another source script"
        "new::Add a New Script to folder"
        "help::List all the commands the available"
        "reset::Reset the script to the factory defaults"
    )
    
    #The following code helps in auto completion
    allCommands=""
    for index in "${commands[@]}" ; do
        key="${index%%::*}"
        allCommands+="${key} "
    done
    
    complete -W "${allCommands}" dyno
    
    case $1 in
        "add")
            read -e -p "Enter the path of the new script to source: " FILE
            fullPath=$(realpath -m $FILE | sed 's/\~\///g')
            if test -f "$fullPath"; then
                if  [[ "$fullPath" -ef "$BASH_SOURCE" ]]; then
                    echo "You cannot add Me Again"
                else
                    echo "source \"$fullPath\""  >> "$BASH_SOURCE"
                    source "$BASH_SOURCE"
                fi
            else
                echo "$(realpath -m $fullPath) File does not exist."
            fi
        ;;
        "new")
            read -e -p "Enter the Directory of your Project: " FILE
            fullPath=$(realpath -m $FILE | sed 's/\~\///g')
            echo $fullPath
            if test -d "$fullPath"; then
                
                read -e -p "Enter the NAME (single word) of the project: " name
                
                echo "Downloading script template"
                cd "$fullPath"
                wget https://raw.githubusercontent.com/ashindiano/dyno/master/template
                if test -f "template"; then
                    
                    sed -i '' "s|_path_|\"$fullPath\"|g" "template"
                    sed -i '' "s/template/$name/g" "template"
                    mv "template"  ".dynoScript"
                    echo "# Ignore dyno tool support file" >> .gitignore
                    echo ".dynoScript" >> .gitignore
                    
                    echo "Adding $fullPath/.dynoScript to Bash sources list "
                    echo "source \"$fullPath/.dynoScript\""  >> "$(dirname "${BASH_SOURCE[0]}")/.nestedScripts"
                    source "$BASH_SOURCE"
                    echo "Success: Project $name created "
                    echo "You can start using ' $name ' command"
                else
                    echo "File Download Error " >&2
                fi
                
            else
                echo "Directory does not exist."
            fi
            
        ;;
        
        "commands")        
            x=$(locate .dynoScript)
            IFS=$'\n' y=($x)
            for file in "${y[@]}" ; do 
              functionname=$(cat ${file})
              functionname=${functionname%()*}   
              echo "${functionname#*function }"
            done
        ;;
        
        "repo")
            echo "Opening current Git Repository in github.com" 

            remote=$(git config --get remote.origin.url)
            if [[ $remote != *".git"* ]]; then
                echo " No Git Found"
            else
                remote=${remote#*git@github.com:}   # remove prefix ending in "git@github.com:"
                remote=${remote%.git*}   # remove suffix starting with ".git"
                open "https://github.com/$remote"
            fi
        ;;
        
        "location")
            cd "$( dirname "${BASH_SOURCE[0]}" )"
        ;;
        "script")
            echo "Opening $(dirname "${BASH_SOURCE[0]}")/.nestedScripts"
            code "$(dirname "${BASH_SOURCE[0]}")/.nestedScripts"
        ;;
        "source")
            echo "Sourcing $(dirname "${BASH_SOURCE[0]}")/.nestedScripts"
            source "$(dirname "${BASH_SOURCE[0]}")/.nestedScripts"
        ;;
        "reset")
            echo "Are you sure you wanna reset Dyno? Yes/No"
            read answer
            if [["$answer" == "Yes"]]; then
                sed '/source/,$d'
            fi
        ;;
        "help"|"h"|"--help"|"-h")
            for index in "${commands[@]}" ; do
                key="${index%%::*}"
                value="${index##*::}"
                echo ${key} - ${value}
            done
        ;;
        
    esac
}

dyno #Run atleast once to list all autocomplete values


alias bye="systemctl poweroff -i"
alias reboo="systemctl reboot -i"
alias e=exit

source "$(dirname "${BASH_SOURCE[0]}")/.nestedScripts"
cd # Go back to the default folder
